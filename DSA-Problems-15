Q. https://leetcode.com/discuss/interview-question/3114099/AMAZON-OA-(INTERN-2024)

                                                                                [AMAZON-OA]

Amazon Engineering maintains a large number of logs of operations across all products. A software engineer is debugging an issue in a product. An efficient way to analyze logs is to write automated scripts to check for patterns. The engineer wants to find the maximum number of times a target word can be obtained by rearranging a subset of characters in a log entry.

Given a log entry s and target word t, the target word can be obtained by selecting some subset of characters from s that can be rearranged to form string t and removing them from s. Determine the maximum number of times the target word can be removed from the given log entry.

Note: Both strings sand t consist only of lowercase English letters.

Example S="mononom" t="mon"  , Sample Case 0

Sample Input For Custom Testing

STDIN

FUNCTION

abacbc

S=

"abacbc"

bca

â†’t = "bca"

Sample Output

2


Solution:


import java.util.HashMap;
import java.util.Map;

public class LogAnalyzer {
    public static int getMaxOccurrences(String s, String t) {
        Map<Character, Integer> sMap = new HashMap<>();
        Map<Character, Integer> tMap = new HashMap<>();

        // Count the frequency of characters in both strings
        for (char c : s.toCharArray()) {
            sMap.put(c, sMap.getOrDefault(c, 0) + 1);
        }
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        int maxOccurrences = Integer.MAX_VALUE;

        // Find the maximum number of times the target word can be obtained
        for (char c : tMap.keySet()) {
            int tFreq = tMap.get(c);
            int sFreq = sMap.getOrDefault(c, 0);

            if (sFreq == 0) {
                return 0; // If any required character is missing in the log entry, return 0
            }

            maxOccurrences = Math.min(maxOccurrences, sFreq / tFreq);
        }

        return maxOccurrences;
    }

    public static void main(String[] args) {
        String s = "mononom";
        String t = "mon";
        int maxOccurrences = getMaxOccurrences(s, t);
        System.out.println(maxOccurrences);
    }
}

