Q-13. Question1: Given an array A consisting of N integers, returns the maximum sum of two numbers whose digits add up to an equal sum.
if there are not two numbers whose digits have an equal sum, the function should return -1.
Constraints: N is integer within the range [1, 200000]
each element of array A is an integer within the range [1, 1000000000]

 

Example1:
Input:
A = [51, 71, 17, 42]
Output: 93
Explanation: There are two pairs of numbers whose digits add up to an equal sum: (51, 42) and (17, 71), The first pair sums up to 93

 

Example2:
Input:
A = [42, 33, 60]
Output: 102
Explanation: The digits of all numbers in A add up the same sum, and choosing to add 42 and 60 gives the result 102

 

Example3:
Input:
A = [51, 32, 43]
Output: -1
Explanation: All numbers in A have digits that add up to different, unique sums

Source Link https://leetcode.com/discuss/interview-question/1957999/microsoft-oa-march-2022


Solution:

import java.util.HashMap;
import java.util.Map;

public class microsoft_OA {
    public static int maxSumOfTwoNumbers(int[] A) {
        Map<Integer, Integer> digitSumToMaxSum = new HashMap<>();
        int maxSum = -1;

        for (int num : A) {
            int digitSum = calculateDigitSum(num);

            if (digitSumToMaxSum.containsKey(digitSum)) {
                int otherNum = digitSumToMaxSum.get(digitSum);
                maxSum = Math.max(maxSum, num + otherNum);
            }

            digitSumToMaxSum.put(digitSum, Math.max(digitSumToMaxSum.getOrDefault(digitSum, 0), num));
        }

        return maxSum;
    }

    private static int calculateDigitSum(int num) {
        int sum = 0;

        while (num != 0) {
            sum += num % 10;
            num /= 10;
        }

        return sum;
    }

    public static void main(String[] args) {
        int[] A = {51, 71, 17, 42};
        System.out.println(maxSumOfTwoNumbers(A)); // Output: 93

        int[] B = {42, 33, 60};
        System.out.println(maxSumOfTwoNumbers(B)); // Output: 102

        int[] C = {51, 32, 43};
        System.out.println(maxSumOfTwoNumbers(C)); // Output: -1
    }
}



DRY RUN:
Let's dry run the code for the example `int[] A = {51, 71, 17, 42};`:

1. We initialize an empty HashMap called `digitSumToMaxSum` to store the maximum sum for each digit sum.

2. We initialize the `maxSum` variable to -1, which will be used to keep track of the maximum sum found so far.

3. We start iterating through the array `A`.

   - For the first iteration, `num` is 51.
   
     - We calculate the digit sum of 51 using the `calculateDigitSum()` function.
       - The digit sum of 51 is 5 + 1 = 6.
     
     - Since `digitSumToMaxSum` is empty, we don't enter the if condition.
     
     - We update the `digitSumToMaxSum` HashMap with the digit sum 6 and the value 51.
     
   - For the second iteration, `num` is 71.
   
     - We calculate the digit sum of 71 using the `calculateDigitSum()` function.
       - The digit sum of 71 is 7 + 1 = 8.
       
     - Since `digitSumToMaxSum` doesn't contain the key 8, we don't enter the if condition.
     
     - We update the `digitSumToMaxSum` HashMap with the digit sum 8 and the value 71.
     
   - For the third iteration, `num` is 17.
   
     - We calculate the digit sum of 17 using the `calculateDigitSum()` function.
       - The digit sum of 17 is 1 + 7 = 8.
       
     - Since `digitSumToMaxSum` contains the key 8, we enter the if condition.
     
     - We retrieve the value associated with the digit sum 8, which is 71.
     
     - We calculate the sum of 17 and 71, which is 88.
     
     - We update the `maxSum` to the maximum of the current `maxSum` and the calculated sum, which is 88.
     
     - We update the `digitSumToMaxSum` HashMap with the digit sum 8 and the maximum of the current value (71) and 17, which is 71.
     
   - For the fourth iteration, `num` is 42.
   
     - We calculate the digit sum of 42 using the `calculateDigitSum()` function.
       - The digit sum of 42 is 4 + 2 = 6.
       
     - Since `digitSumToMaxSum` contains the key 6, we enter the if condition.
     
     - We retrieve the value associated with the digit sum 6, which is 51.
     
     - We calculate the sum of 42 and 51, which is 93.
     
     - We update the `maxSum` to the maximum of the current `maxSum` and the calculated sum, which is 93.
     
     - We update the `digitSumToMaxSum` HashMap with the digit sum 6 and the maximum of the current value (51) and 42, which is 51.
     
4. After iterating through all the numbers in `A`, we return the value of `maxSum`, which is 93.

Therefore, for the input `int[] A = {51, 71, 17, 42};`, the output of the `maxSumOfTwoNumbers` function will be 93.
