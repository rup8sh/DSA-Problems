Q. Given an array of size “N”; find the number of triplets; such that A[i] >A[j]< A[k] such that i < j < k ; 

1<=N<=1000

                                   [GOOGLE- OA]

Solution: 
Brute force solution would be eunning 3 for loops across the array for the three variables and the TIME COMPLEXITY would be O(n^3).

Optimized Solution: 

import java.util.*;
import java.io.*;
public class google_oa_85_lakhs {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int n = sc.nextInt();
		int[] b = new int[n+1];
		int pref[] = new int[n+1];
		int suf[] = new int[n+1];
		
		pref[1] =0;
		
		for(int i =1; i<=n; i++)
		{
			b[i] = sc.nextInt();
		}
		
		int j=2;
		
		while(j<=n)
		{
			int c =0;
			int i=1;
			while(i<=j-1)
			{
				if(b[i]>b[j])
				{
					c++;
				}
				i++;
			}
			pref[j]=c;
			j++;
		}
		
		j = n-1;
		
		while(j>=1)
		{
			int c =0;
			int k =j+1;
			while(k<=n)
			{
				if(b[j]<b[k])
				{
					c++;
				}
				k++;
			}
			suf[j] =c;
			j--;
		}
		
		int c =0;
		j=1;
		
		while(j<=n)
		{
			c = c+pref[j] *suf[j];
			j++;
		}
		System.out.println(c);
				
	}

}

[What We Are Doing Here? :
      seeing the question we will be seeing the array by 

    ]


Follow-Up Question:  Given an array of size “N”; find the number of quadruplets; such that A[i] > A[j] < A[k] >A[l] such that i < j < k < l ; 

1<=N<=1000
[The moment which will test your love towards software engineering LOL)

Optimized SOlution:
import java.util.Scanner;

public class Follow_up_google_85lakhs {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] b = new int[n + 1];
        int[] pref = new int[n + 1];
        int[] suf = new int[n + 1];
        pref[1] = 0;

        for (int i = 1; i <= n; i++) {
            b[i] = scanner.nextInt();
        }

        int j = 2;
        while (j <= n) {
            int c = 0;
            int i = 1;
            while (i <= j - 1) {
                if (b[i] > b[j]) {
                    c++;
                }
                i++;
            }
            pref[j] = c;
            j++;
        }

        suf[n] = 0;

        int k = n - 1;
        while (k >= 1) {
            int c = 0;
            int l = k + 1;
            while (l <= n) {
                if (b[k] > b[l]) {
                    c++;
                }
                l++;
            }
            suf[k] = c;
            k--;
        }

        int result = 0;
        j = 1;

        while (j <= n) {
            int m = j + 1;
            while (m <= n) {
                if (b[j] < b[m]) {
                    result = result + pref[j] * suf[m];
                }
                m++;
            }
            j++;
        }

        System.out.println(result);
    }
}

