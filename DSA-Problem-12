Q-12. https://practice.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Given an array containing N integers and an integer K., Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

 

Example 1:
 

Input :
A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.
Example 2:

Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function lenOfLongSubarr() that takes an array (A), sizeOfArray (n),  sum (K)and returns the required length of the longest Sub-Array. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

 

Constraints:
1<=N<=105
-105<=A[i], K<=105


Solution:


class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int arr[], int n, int k) {
        //Complete the function
          HashMap<Integer, Integer> prefixSum = new HashMap<>();
        int sum = 0; // Initialize the sum of elements
        int maxLength = 0; // Initialize the length of the longest subarray

        // Traverse the input array
        for (int i = 0; i < n; i++) {
            sum += arr[i]; // Add the current element to the sum

            // Check if the sum is equal to the target value k
            if (sum == k) {
                maxLength = i + 1; // Update the length of the longest subarray
            }

            // If the prefix sum already exists in the HashMap, it means there is a subarray with the target sum
            // Update the maxLength if the length of this subarray is greater than the current maxLength
            if (prefixSum.containsKey(sum - k)) {
                maxLength = Math.max(maxLength, i - prefixSum.get(sum - k));
            }

            // If the prefix sum does not exist in the HashMap, add it with its index
            if (!prefixSum.containsKey(sum)) {
                prefixSum.put(sum, i);
            }
        }

        return maxLength;
    }
    
    
}
